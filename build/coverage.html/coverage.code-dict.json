{"/home/travis/build/npmtest/node-npmtest-yadda/test.js":"/* istanbul instrument in package npmtest_yadda */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-yadda/lib.npmtest_yadda.js":"/* istanbul instrument in package npmtest_yadda */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_yadda = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_yadda = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-yadda/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-yadda && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_yadda */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_yadda\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_yadda.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_yadda.rollup.js'] =\n            local.assetsDict['/assets.npmtest_yadda.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_yadda.__dirname + '/lib.npmtest_yadda.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/index.js":"\"use strict\";\n\nvar api = {\n    Yadda: require('./Yadda'),\n    EventBus: require('./EventBus'),\n    Interpreter: require('./Interpreter'),\n    Context: require('./Context'),\n    Library: require('./Library'),\n    Dictionary: require('./Dictionary'),\n    FeatureFileSearch: require('./FeatureFileSearch'),\n    FileSearch: require('./FileSearch'),\n    Platform: require('./Platform'),\n    localisation: require('./localisation/index'),\n    converters: require('./converters/index'),\n    parsers: require('./parsers/index'),\n    plugins: require('./plugins/index'),\n    shims: require('./shims/index'),\n    createInstance: function() {\n        // Not everyone shares my sense of humour re the recursive api :(\n        // See https://github.com/acuminous/yadda/issues/111\n        return api.Yadda.apply(null, Array.prototype.slice.call(arguments, 0));\n    }\n};\n\nmodule.exports = api;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/Yadda.js":"/*jslint node: true */\n\"use strict\";\n\nvar Interpreter = require('./Interpreter');\nvar Context = require('./Context');\nvar fn = require('./fn');\n\nvar Yadda = function(libraries, interpreter_context) {\n\n    if (!(this instanceof Yadda)) {\n        return new Yadda(libraries, interpreter_context);\n    }\n\n    this.interpreter = new Interpreter(libraries);\n\n    this.requires = function(libraries) {\n        this.interpreter.requires(libraries);\n        return this;\n    };\n\n    this.yadda = function(scenario, scenario_context, next) {\n        if (arguments.length === 0) return this;\n        if (arguments.length === 2 && fn.is_function(scenario_context)) return this.yadda(scenario, {}, scenario_context);\n        this.interpreter.validate(scenario);\n        this.interpreter.interpret(scenario, new Context().merge(interpreter_context).merge(scenario_context), next);\n    };\n\n    // Not everyone shares my sense of humour re the recursive api :(\n    // See https://github.com/acuminous/yadda/issues/111\n    this.run = this.yadda;\n\n    this.toString = function() {\n        return \"Yadda 1.3.0 Copyright 2010 Stephen Cresswell / Energized Work Ltd\";\n    };\n};\n\nmodule.exports = Yadda;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/Interpreter.js":"\"use strict\";\n\nvar Competition = require('./Competition');\nvar Context = require('./Context');\nvar EventBus = require('./EventBus');\nvar $ = require('./Array');\nvar fn = require('./fn');\n\n// Understands a scenario\nvar Interpreter = function(libraries) {\n\n    // eslint-disable-next-line no-redeclare\n    var libraries = $(libraries);\n    var event_bus = EventBus.instance();\n    var last_macro;\n    var _this = this;\n\n    this.requires = function(libraries) {\n        libraries.push_all(libraries);\n        return this;\n    };\n\n    this.validate = function(scenario) {\n        var results = $(scenario).collect(function(step) {\n            var report = _this.rank_macros(step).validate();\n            last_macro = report.winner;\n            return report;\n        });\n        if (results.find(by_invalid_step)) throw new Error('Scenario cannot be interpreted\\n' + results.collect(validation_report).join('\\n'));\n    };\n\n    function by_invalid_step(result) {\n        return !result.valid;\n    }\n\n    function validation_report(result) {\n        return result.step + (result.valid ? '' : ' <-- ' + result.reason);\n    }\n\n    this.interpret = function(scenario, scenario_context, next) {\n        scenario_context = new Context().merge(scenario_context);\n        event_bus.send(EventBus.ON_SCENARIO, { scenario: scenario, ctx: scenario_context.properties });\n        var iterator = make_step_iterator(scenario_context, next);\n        $(scenario).each_async(iterator, next);\n    };\n\n    var make_step_iterator = function(scenario_context, next) {\n        var iterator = function(step, index, callback) {\n            _this.interpret_step(step, scenario_context, callback);\n        };\n        return next ? iterator : fn.asynchronize(null, iterator);\n    };\n\n    this.interpret_step = function(step, scenario_context, next) {\n        var context = new Context().merge(scenario_context);\n        event_bus.send(EventBus.ON_STEP, { step: step, ctx: context.properties });\n        var macro = this.rank_macros(step).clear_winner();\n        last_macro = macro;\n        macro.interpret(step, context || {}, next);\n    };\n\n    this.rank_macros = function(step) {\n        return new Competition(step, compatible_macros(step), last_macro);\n    };\n\n    var compatible_macros = function(step) {\n        return libraries.inject([], function(macros, library) {\n            return macros.concat(library.find_compatible_macros(step));\n        });\n    };\n};\n\nmodule.exports = Interpreter;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/Competition.js":"\"use strict\";\n\nvar LevenshteinDistanceScore = require('./scores/LevenshteinDistanceScore');\nvar SameLibraryScore = require('./scores/SameLibraryScore');\nvar MultiScore = require('./scores/MultiScore');\nvar $ = require('./Array');\n\n// Understands appropriateness of macros in relation to a specific step\nvar Competition = function(step, macros, last_macro) {\n\n    var results = [];\n\n    this.validate = function() {\n        if (is_undefined()) return { step: step, valid: false, reason: 'Undefined Step' };\n        if (is_ambiguous()) return { step: step, valid: false, reason: 'Ambiguous Step (Patterns [' + winning_patterns() + '] are all equally good candidates)' };\n        return { step: step, valid: true, winner: this.winner() };\n    };\n\n    this.clear_winner = function() {\n        if (is_undefined()) throw new Error('Undefined Step: [' + step + ']');\n        if (is_ambiguous()) throw new Error('Ambiguous Step: [' + step + ']. Patterns [' + winning_patterns() + '] match equally well.');\n        return this.winner();\n    };\n\n    function is_undefined() {\n        return results.length === 0;\n    }\n\n    function is_ambiguous() {\n        return (results.length > 1) && results[0].score.equals(results[1].score);\n    }\n\n    this.winner = function() {\n        return results[0].macro;\n    };\n\n    function winning_patterns() {\n        return results.find_all(by_winning_score).collect(macro_signatures).join(', ');\n    }\n\n    function rank(step, macros) {\n        results = macros.collect(function(macro) {\n            return {\n                macro: macro,\n                score: new MultiScore([\n                    new LevenshteinDistanceScore(step, macro.levenshtein_signature()),\n                    new SameLibraryScore(macro, last_macro)\n                ])\n            };\n        }).sort(by_ascending_score);\n    }\n\n    function by_ascending_score(a, b) {\n        return b.score.compare(a.score);\n    }\n\n    function by_winning_score(result) {\n        return result.score.equals(results[0].score);\n    }\n\n    function macro_signatures(result) {\n        return result.macro.toString();\n    }\n\n    rank(step, $(macros));\n};\n\nmodule.exports = Competition;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/scores/LevenshteinDistanceScore.js":"\"use strict\";\n\n// Understands similarity of two strings\nvar LevenshteinDistanceScore = function(s1, s2) {\n\n    this.value;\n    this.type = 'LevenshteinDistanceScore';\n    var distance_table;\n    var _this = this;\n\n    var initialise = function() {\n\n        var x = s1.length;\n        var y = s2.length;\n\n        distance_table = new Array(x + 1);\n\n        /* eslint-disable no-redeclare */\n        for (var i = 0; i <= x; i++) {\n            distance_table[i] = new Array(y + 1);\n        }\n\n        for (var i = 0; i <= x; i++) {\n            for (var j = 0; j <= y; j++) {\n                distance_table[i][j] = 0;\n            }\n        }\n\n        for (var i = 0; i <= x; i++) {\n            distance_table[i][0] = i;\n        }\n\n        for (var j = 0; j <= y; j++) {\n            distance_table[0][j] = j;\n        }\n        /* eslint-enable no-redeclare */\n    };\n\n    var score = function() {\n\n        // eslint-disable-next-line no-return-assign\n        if (s1 === s2) return _this.value = 0;\n\n        for (var j = 0; j < s2.length; j++) {\n            for (var i = 0; i < s1.length; i++) {\n                if (s1[i] === s2[j]) {\n                    distance_table[i+1][j+1] = distance_table[i][j];\n                } else {\n                    var deletion = distance_table[i][j+1] + 1;\n                    var insertion = distance_table[i+1][j] + 1;\n                    var substitution = distance_table[i][j] + 1;\n                    distance_table[i+1][j+1] = Math.min(substitution, deletion, insertion);\n                }\n            }\n        }\n        _this.value = distance_table[s1.length][s2.length];\n    };\n\n    this.compare = function(other) {\n        return other.value - this.value;\n    };\n\n    this.equals = function(other) {\n        if (!other) return false;\n        return (this.type === other.type && this.value === other.value);\n    };\n\n    initialise();\n    score();\n};\n\nmodule.exports = LevenshteinDistanceScore;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/scores/SameLibraryScore.js":"\"use strict\";\n\nvar SameLibraryScore = function(m1, m2) {\n\n    this.value = m1.is_sibling(m2) ? 1 : 0;\n    this.type = 'SameLibraryScore';\n\n    this.compare = function(other) {\n        return this.value - other.value;\n    };\n\n    this.equals = function(other) {\n        if (!other) return false;\n        return (this.type === other.type && this.value === other.value);\n    };\n};\n\nmodule.exports = SameLibraryScore;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/scores/MultiScore.js":"\"use strict\";\n\nvar $ = require('../Array');\n\nvar MultiScore = function(scores) {\n\n    this.scores = $(scores);\n    this.type = 'MultiScore';\n\n    this.compare = function(other) {\n        for (var i = 0; i < this.scores.length; i++) {\n            var difference = this.scores[i].compare(other.scores[i]);\n            if (difference) return difference;\n        }\n        return 0;\n    };\n\n    this.equals = function(other) {\n        if (!other) return false;\n        if (this.type !== other.type) return false;\n        return this.compare(other) === 0;\n    };\n};\n\nmodule.exports = MultiScore;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/Array.js":"\"use strict\";\n\nvar fn = require('./fn');\n\nmodule.exports = function(obj) {\n\n    function ensure_array(obj) {\n        var array = obj ? [].concat(obj) : [];\n        array.in_array = fn.curry(array, in_array, array);\n        array.each = fn.curry(array, each, array);\n        array.each_async = fn.curry(array, each_async, array);\n        array.collect = fn.curry(array, collect, array);\n        array.collect_async = fn.curry(array, collect_async, array);\n        array.flatten = fn.curry(array, flatten, array);\n        array.inject = fn.curry(array, inject, array);\n        array.push_all = fn.curry(array, push_all, array);\n        array.fill = fn.curry(array, fill, array);\n        array.find_all = fn.curry(array, find_all, array);\n        array.find = fn.curry(array, find, array);\n        array.last = fn.curry(array, last, array);\n        array.naked = fn.curry(array, naked, array);\n        return array;\n    }\n\n    function is_array(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    }\n\n    function in_array(items, item) {\n        for (var i = 0; i < items.length; i++) {\n            if (items[i] === item) {\n                return true;\n            }\n        }\n    }\n\n    function flatten(items) {\n        if (!is_array(items)) return [items];\n        if (items.length === 0) return items;\n        var head = flatten(items[0]);\n        var tail = flatten(items.slice(1));\n        return ensure_array(head.concat(tail));\n    }\n\n    function each(items, iterator) {\n        var result;\n        for (var i = 0; i < items.length; i++) {\n            result = iterator(items[i], i);\n        }\n        return result;\n    }\n\n    function each_async(items, iterator, callback) {\n        callback = callback || fn.noop;\n        if (!items.length) return callback();\n        var index = 0;\n        var iterate = function() {\n            iterator(items[index], index, function(err, result) {\n                if (err) return callback(err);\n                if (++index >= items.length) return callback(null, result);\n                iterate();\n            });\n        };\n        iterate();\n    }\n\n    function collect(items, iterator) {\n        var results = ensure_array();\n        for (var i = 0; i < items.length; i++) {\n            results.push(iterator(items[i], i));\n        }\n        return results;\n    }\n\n    function collect_async(items, iterator, callback) {\n        var results = ensure_array();\n        each_async(items, function(item, index, each_callback) {\n            iterator(item, index, function(err) {\n                if (err) return each_callback(err);\n                results.push_all(Array.prototype.splice.call(arguments, 1));\n                each_callback();\n            });\n        }, function(err) {\n            if (err) return callback(err);\n            callback(null, results);\n        });\n    }\n\n    function inject(items, default_value, iterator) {\n        var result = default_value;\n        for (var i = 0; i < items.length; i++) {\n            result = iterator(result, items[i]);\n        }\n        return result;\n    }\n\n    function push_all(items, more_items) {\n        more_items = more_items ? [].concat(more_items) : [];\n        for (var i = 0; i < more_items.length; i++) {\n            items.push(more_items[i]);\n        }\n        return items;\n    }\n\n    function fill(items, item, num) {\n        for (var i = 0; i < num; i++) {\n            items.push(item);\n        }\n        return items;\n    }\n\n    function find_all(items, test) {\n        var results = ensure_array();\n        for (var i = 0; i < items.length; i++) {\n            if (test(items[i], i)) {\n                results.push(items[i]);\n            }\n        }\n        return results;\n    }\n\n    function find(items, test) {\n        var result;\n        for (var i = 0; i < items.length; i++) {\n            if (test(items[i], i)) {\n                result = items[i];\n                break;\n            }\n        }\n        return result;\n    }\n\n    function last(items) {\n        return items[items.length - 1];\n    }\n\n    function naked(items) {\n        return [].concat(items);\n    }\n\n    return ensure_array(obj);\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/fn.js":"\"use strict\";\n\nmodule.exports = (function() {\n\n    var slice = Array.prototype.slice;\n\n    function curry(ctx, fn) {\n        var args = slice.call(arguments, 2);\n        return function() {\n            return fn.apply(ctx, args.concat(slice.call(arguments)));\n        };\n    }\n\n    function invoke(fn, ctx, args) {\n        return fn.apply(ctx, args);\n    }\n\n    function is_function(object) {\n        var getType = {};\n        return object && getType.toString.call(object) === '[object Function]';\n    }\n\n    function noop() {}\n\n    function noargs(fn) {\n        return function() {\n            return fn();\n        };\n    }\n\n    function asynchronize(ctx, fn) {\n        return function() {\n            var next = slice.call(arguments, arguments.length - 1)[0];\n            var args = slice.call(arguments, 0, arguments.length - 2);\n            fn.apply(ctx, args);\n            if (next) next();\n        };\n    }\n\n    return {\n        noop: noop,\n        noargs: noargs,\n        async_noop: asynchronize(null, noop),\n        asynchronize: asynchronize,\n        is_function: is_function,\n        curry: curry,\n        invoke: invoke\n    };\n\n\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/Context.js":"\"use strict\";\n\n// Constructs an object that macros will be bound to before execution\nvar Context = function(properties) {\n\n    // I was previously getting some weird errors using instanceof to determine if\n    // the \"other\" object was a context object. Using pTFUHht733hM6wfnruGLgAu6Uqvy7MVp instead\n    this.pTFUHht733hM6wfnruGLgAu6Uqvy7MVp = true;\n    this.properties = {};\n\n    this.merge = function(other) {\n        if (other && other.pTFUHht733hM6wfnruGLgAu6Uqvy7MVp) return this.merge(other.properties);\n        return new Context(this.properties)._merge(other);\n    };\n\n    this._merge = function(other) {\n        for (var key in other) { this.properties[key] = other[key]; }\n        return this;\n    };\n\n    this._merge(properties);\n};\n\nmodule.exports = Context;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/EventBus.js":"\"use strict\";\n\nvar $ = require('./Array');\nvar fn = require('./fn');\nvar event_bus = new EventBus();\n\n// A communication channel between event emitters and event listeners\nfunction EventBus() {\n\n    var event_handlers = $();\n\n    this.send = function(event_name, event_data, next) {\n        if (arguments.length === 1) return this.send(event_name, {});\n        if (arguments.length === 2 && fn.is_function(event_data)) return this.send(event_name, {}, event_data);\n        notify_handlers(event_name, event_data);\n        next && next();\n        return this;\n    };\n\n    this.on = function(event_pattern, callback) {\n        event_handlers.push({ pattern: event_pattern, callback: callback });\n        return this;\n    };\n\n    var notify_handlers = function(event_name, event_data) {\n        find_handlers(event_name).each(function(callback) {\n            callback({ name: event_name, data: event_data });\n        });\n    };\n\n    var find_handlers = function(event_name) {\n        return event_handlers.find_all(function(handler) {\n            return new RegExp(handler.pattern).test(event_name);\n        }).collect(function(handler) {\n            return handler.callback;\n        });\n    };\n}\n\nfunction instance() {\n    return event_bus;\n}\n\nmodule.exports = {\n    instance: instance,\n    ON_SCENARIO: '__ON_SCENARIO__',\n    ON_STEP: '__ON_STEP__',\n    ON_EXECUTE: '__ON_EXECUTE__',\n    ON_DEFINE: '__ON_DEFINE__'\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/Library.js":"\"use strict\";\n\nvar Macro = require('./Macro');\nvar Dictionary = require('./Dictionary');\nvar $ = require('./Array');\n\n// Understands how to index macros\nvar Library = function(dictionary) {\n\n    // eslint-disable-next-line no-redeclare\n    var dictionary = dictionary || new Dictionary();\n    var macros = $();\n    var _this = this;\n\n    this.define = function(signatures, fn, macro_context, options) {\n        $(signatures).each(function(signature) {\n            define_macro(signature, fn, macro_context, options);\n        });\n        return this;\n    };\n\n    var define_macro = function(signature, fn, macro_context, options) {\n        if (_this.get_macro(signature)) throw new Error('Duplicate macro: [' + signature + ']');\n        macros.push(new Macro(signature, dictionary.expand(signature), fn, macro_context, _this, options));\n    };\n\n    this.get_macro = function(signature) {\n        return macros.find(function(other_macro) {\n            return other_macro.is_identified_by(signature);\n        });\n    };\n\n    this.find_compatible_macros = function(step) {\n        return macros.find_all(function(macro) {\n            return macro.can_interpret(step);\n        });\n    };\n};\n\nmodule.exports = Library;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/Macro.js":"\"use strict\";\n\nvar fn = require('./fn');\nvar $ = require('./Array');\nvar Context = require('./Context');\nvar RegularExpression = require('./RegularExpression');\nvar EventBus = require('./EventBus');\n\n// Understands how to invoke a step\nvar Macro = function(signature, parsed_signature, macro, macro_context, library, options) {\n\n    /* eslint-disable no-redeclare */\n    var signature = normalise(signature);\n    var signature_pattern = new RegularExpression(parsed_signature.pattern);\n    var macro = macro || fn.async_noop;\n    var event_bus = EventBus.instance();\n    var options = options || {};\n    /* eslint-enable no-redeclare */\n\n    this.library = library;\n\n    this.is_identified_by = function(other_signature) {\n        return signature === normalise(other_signature);\n    };\n\n    this.can_interpret = function(step) {\n        return signature_pattern.test(step);\n    };\n\n    this.interpret = function(step, scenario_context, next) {\n        var context = new Context({step:step}).merge(macro_context).merge(scenario_context);\n        convert(signature_pattern.groups(step), function(err, args) {\n            if (err) return next(err);\n            event_bus.send(EventBus.ON_EXECUTE, { step: step, ctx: context.properties, pattern: signature_pattern.toString(), args: args });\n            var result;\n            try {\n                result = fn.invoke(macro, context.properties, is_sync(args) ? args : args.concat(next));\n            } catch (err) {\n                if (next) return next(err);\n                throw err;\n            }\n            if (is_promise(result)) return result.then(fn.noargs(next)).catch(next);\n            if (is_sync(args)) return next && next();\n        });\n    };\n\n    this.is_sibling = function(other_macro) {\n        return other_macro && other_macro.defined_in(library);\n    };\n\n    this.defined_in = function(other_library) {\n        return library === other_library;\n    };\n\n    this.levenshtein_signature = function() {\n        return signature_pattern.without_expressions();\n    };\n\n    this.toString = function() {\n        return signature;\n    };\n\n    function is_promise(result) {\n        if (options.mode) return options.mode === 'promise';\n        return result && result.then;\n    }\n\n    function is_sync(args) {\n        if (options.mode) return options.mode === 'sync';\n        return macro !== fn.async_noop && macro.length !== args.length + 1;\n    }\n\n    function normalise(signature) {\n        return new RegExp(signature).toString();\n    }\n\n    function convert(args, next) {\n        var index = 0;\n        return $(parsed_signature.converters).collect(function(converter) {\n            return function(callback) {\n                converter.apply(null, args.slice(index, index += converter.length - 1).concat(callback));\n            };\n        }).collect_async(function(converter, index, callback) {\n            converter(callback);\n        }, next);\n    }\n\n    event_bus.send(EventBus.ON_DEFINE, { signature: signature, pattern: signature_pattern.toString() });\n};\n\nmodule.exports = Macro;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/RegularExpression.js":"\"use strict\";\n\nvar $ = require('./Array');\n\n// Wrapper for JavaScript Regular Expressions\nvar RegularExpression = function(pattern_or_regexp) {\n\n    var groups_pattern = /(^|[^\\\\\\\\])\\(.*?\\)/g;\n    var sets_pattern = /(^|[^\\\\\\\\])\\[.*?\\]/g;\n    var repetitions_pattern = /(^|[^\\\\\\\\])\\{.*?\\}/g;\n    var regex_aliases_pattern = /(^|[^\\\\\\\\])\\\\./g;\n    var non_word_tokens_pattern = /[^\\w\\s]/g;\n    var regexp = new RegExp(pattern_or_regexp);\n\n    this.test = function(text) {\n        var result = regexp.test(text);\n        this.reset();\n        return result;\n    };\n\n    this.groups = function(text) {\n        var results = $();\n        var match = regexp.exec(text);\n        while (match) {\n            var groups = match.slice(1, match.length);\n            results.push(groups);\n            match = regexp.global && regexp.exec(text);\n        }\n        this.reset();\n        return results.flatten();\n    };\n\n    this.reset = function() {\n        regexp.lastIndex = 0;\n        return this;\n    };\n\n    this.without_expressions = function() {\n        return regexp.source.replace(groups_pattern, '$1')\n                            .replace(sets_pattern, '$1')\n                            .replace(repetitions_pattern, '$1')\n                            .replace(regex_aliases_pattern, '$1')\n                            .replace(non_word_tokens_pattern, '');\n    };\n\n    this.equals = function(other) {\n        return this.toString() === other.toString();\n    };\n\n    this.toString = function() {\n        return \"/\" + regexp.source + \"/\";\n    };\n};\n\nmodule.exports = RegularExpression;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/Dictionary.js":"\"use strict\";\n\nvar $ = require('./Array');\nvar RegularExpression = require('./RegularExpression');\nvar pass_through_converter = require('./converters/pass-through-converter');\n\n// Understands term definitions\nvar Dictionary = function(prefix) {\n\n    // eslint-disable-next-line no-redeclare\n    var prefix = prefix || '$';\n    var definitions = {};\n    var term_grouping_pattern = new RegularExpression(new RegExp('(?:^|[^\\\\\\\\])\\\\' + prefix + '(\\\\w+)', 'g'));\n    var term_splitting_pattern = new RegExp('(\\\\' + prefix + '\\\\w+)');\n    var _this = this;\n\n    this.define = function(term, pattern, converters) {\n        if (is_defined(term)) throw new Error('Duplicate term: [' + term + ']');\n        if (converters && is_expandable(pattern)) throw new Error('Expandable terms cannot use converters: [' + term + ']');\n        if (converters && !is_compatible(converters, pattern)) throw new Error('Wrong number of converters for: [' + term + ']');\n\n        if (!is_expandable(pattern) && !converters) converters = get_matching_group_converters(pattern);\n        definitions[term] = { pattern: normalise(pattern), converters: $(converters) };\n        return this;\n    };\n\n    this.merge = function(other) {\n        if (other._prefix() !== this._prefix()) throw new Error('Cannot merge dictionaries with different prefixes');\n        return new Dictionary(prefix)._merge(this)._merge(other);\n    };\n\n    this._merge = function(other) {\n        other.each(function(term, definition) {\n            _this.define(term, definition.pattern);\n        });\n        return this;\n    };\n\n    this._prefix = function() {\n        return prefix;\n    };\n\n    this.each = function(callback) {\n        for (var term in definitions) {\n            callback(term, definitions[term]);\n        }\n    };\n\n    this.expand = function(signature, already_expanding) {\n        var text = normalise(signature);\n        return is_expandable(text) ? { pattern: expand_sub_terms(text, $(already_expanding)), converters: get_converters(text) }\n                                   : { pattern: text, converters: get_converters(text) };\n    };\n\n    function expand_sub_terms(text, already_expanding) {\n        return get_sub_terms(text).each(function(sub_term) {\n            if (already_expanding.in_array(sub_term)) throw new Error('Circular Definition: [' + already_expanding.join(', ') + ']');\n            var sub_term_grouping_pattern = expand_sub_term(sub_term, already_expanding);\n            text = text.replace(prefix + sub_term, sub_term_grouping_pattern);\n            return text;\n        });\n    }\n\n    function get_sub_terms(text) {\n        return term_grouping_pattern.groups(text);\n    }\n\n    function expand_sub_term(sub_term, already_expanding) {\n        var pattern = definitions[sub_term] ? definitions[sub_term].pattern : '(.+)';\n        return is_expandable(pattern) ? _this.expand(pattern, already_expanding.concat(sub_term)).pattern : pattern;\n    }\n\n    function normalise(pattern) {\n        return pattern.toString().replace(/^\\/|\\/$/g, '');\n    }\n\n    function is_defined(term) {\n        return !!definitions[term];\n    }\n\n    function is_expandable(text) {\n        return term_grouping_pattern.test(text);\n    }\n\n    function is_compatible(converters, pattern) {\n        return count_converter_arguments(converters) === count_matching_groups(pattern);\n    }\n\n    function get_converters(text) {\n        return $(text.split(term_splitting_pattern)).inject($(), function(converters, fragment) {\n            return converters.push_all(is_expandable(fragment) ? get_sub_term_converters(fragment)\n                                                               : get_matching_group_converters(fragment));\n        });\n    }\n\n    function get_matching_group_converters(text) {\n        return $().fill(pass_through_converter, count_matching_groups(text));\n    }\n\n    function get_sub_term_converters(text) {\n        return get_sub_terms(text).inject($(), function(converters, sub_term) {\n            return is_defined(sub_term) ? converters.push_all(definitions[sub_term].converters)\n                                        : converters.push_all(get_converters(expand_sub_term(sub_term, [])));\n        });\n    }\n\n    function count_matching_groups(pattern) {\n        return new RegExp(pattern + '|').exec('').length - 1;\n    }\n\n    function count_converter_arguments(converters) {\n        return $(converters).inject(0, function(sum, converter) {\n            return sum + converter.length - 1;\n        });\n    }\n};\n\nmodule.exports = Dictionary;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/converters/pass-through-converter.js":"\"use strict\";\n\nmodule.exports = function pass_through_converter(value, next) {\n    return next(null, value);\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/FeatureFileSearch.js":"\"use strict\";\n\nvar FileSearch = require('./FileSearch');\n\nvar FeatureFileSearch = function(directories) {\n    this.constructor(directories, /.*\\.(?:feature|spec|specification)$/);\n};\nFeatureFileSearch.prototype = new FileSearch();\n\nmodule.exports = FeatureFileSearch;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/FileSearch.js":"\"use strict\";\n\nvar shims = require('./shims/index');\nvar path = shims.path;\nvar fs = shims.fs;\nvar $ = require('./Array');\n\n// Searches for files in the given directories and their sub-directories, matching at least one of the given patterns\nvar FileSearch = function(directories, patterns) {\n\n    // eslint-disable-next-line no-redeclare\n    var patterns = patterns || /.*/;\n\n    this.each = function(fn) {\n        this.list().forEach(fn);\n    };\n\n    this.list = function() {\n        return $(directories).inject($(), function(files, directory) {\n            return files.concat(list_files(directory).find_all(by_pattern));\n        });\n    };\n\n    var list_files = function(directory) {\n        return $(list_immediate_files(directory).concat(list_sub_directory_files(directory)));\n    };\n\n    var list_immediate_files = function(directory) {\n        return ls(directory).find_all(by_file);\n    };\n\n    var list_sub_directory_files = function(directory) {\n        return ls(directory).find_all(by_directory).inject($(), function(files, directory) {\n            return files.concat(list_files(directory));\n        });\n    };\n\n    var ls = function(directory) {\n        if (!fs.existsSync(directory)) return $();\n        return $(fs.readdirSync(directory)).collect(function(file) {\n            return path.join(directory, file);\n        });\n    };\n\n    var by_file = function(file) {\n        return !by_directory(file);\n    };\n\n    var by_directory = function(file) {\n        return fs.statSync(file).isDirectory();\n    };\n\n    var by_pattern = function(filename) {\n        return $(patterns).find(function(pattern) {\n            return new RegExp(pattern).test(filename);\n        });\n    };\n};\n\nmodule.exports = FileSearch;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/shims/index.js":"\"use strict\";\n\nvar Platform = require('../Platform');\n\nmodule.exports = (function () {\n\n    var platform = new Platform();\n\n    var shims = {\n        node: function () {\n            return {\n                fs: require('fs'),\n                path: require('path'),\n                process: process\n            };\n        },\n        phantom: function () {\n            return {\n                fs: require('./phantom-fs'),\n                path: require('./phantom-path'),\n                process: require('./phantom-process')\n            };\n        },\n        karma: function () {\n            return {\n                fs: require('./karma-fs'),\n                path: require('./karma-path'),\n                process: require('./karma-process')\n            };\n        }\n    };\n\n    function get_shim() {\n        if (platform.is_phantom()) return shims.phantom();\n        if (platform.is_browser() && platform.is_karma()) return shims.karma();\n        if (platform.is_node()) return shims.node();\n        return {};\n    }\n\n    return get_shim();\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/Platform.js":"\"use strict\";\n\nmodule.exports = Platform;\n\nfunction Platform() {\n\n    function get_container() {\n        /* eslint-disable no-undef */\n        if (is_browser()) return window;\n        if (is_phantom()) return phantom;\n        if (is_node()) return global;\n        /* eslint-enable no-undef */\n    }\n\n    function is_node() {\n        return typeof process !== 'undefined' &&\n               typeof global !== 'undefined' &&\n               typeof __dirname !== 'undefined';\n    }\n\n    function is_browser() {\n        return typeof window !== 'undefined';\n    }\n\n    function is_phantom() {\n        return typeof phantom !== 'undefined';\n    }\n\n    function is_karma() {\n        return typeof window !== 'undefined' && typeof window.__karma__ !== 'undefined';\n    }\n\n    return {\n        get_container: get_container,\n        is_node: is_node,\n        is_browser: is_browser,\n        is_phantom: is_phantom,\n        is_karma: is_karma\n    };\n\n}\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/index.js":"\"use strict\";\n\nmodule.exports = {\n    Chinese: require('./Chinese'),\n    English: require('./English'),\n    French: require('./French'),\n    German: require('./German'),\n    Dutch: require('./Dutch'),\n    Norwegian: require('./Norwegian'),\n    Pirate: require('./Pirate'),\n    Ukrainian: require('./Ukrainian'),\n    Polish: require('./Polish'),\n    Spanish: require('./Spanish'),\n    Russian: require('./Russian'),\n    Portuguese: require('./Portuguese'),\n    default: require('./English'),\n    Language: require('./Language')\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/Chinese.js":"\"use strict\";\r\n\r\nvar Language =  require('./Language');\r\n\r\nmodule.exports = (function() {\r\n\r\n    var vocabulary = {\r\n        feature: '[Ff]eature|功能',\r\n        scenario: '(?:[Ss]cenario|[Ss]cenario [Oo]utline|场景|剧本|(?:场景|剧本)?大纲)',\r\n        examples: '(?:[Ee]xamples|[Ww]here|例子|示例|举例|样例)',\r\n        pending: '(?:[Pp]ending|[Tt]odo|待定|待做|待办|暂停|暂缓)',\r\n        only: '(?:[Oo]nly|仅仅?)',\r\n        background: '[Bb]ackground|背景|前提',\r\n        given: '(?:[Gg]iven|[Ww]ith|[Aa]nd|[Bb]ut|[Ee]xcept|假如|假设|假定|并且|而且|同时|但是)',\r\n        when: '(?:[Ww]hen|[Ii]f|[Aa]nd|[Bb]ut|当|如果|并且|而且|同时|但是)',\r\n        then: '(?:[Tt]hen|[Ee]xpect|[Aa]nd|[Bb]ut|那么|期望|并且|而且|同时|但是)',\r\n        _steps: ['given', 'when', 'then']\r\n    };\r\n\r\n    return new Language('Chinese', vocabulary);\r\n})();\r\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/Language.js":"\"use strict\";\n\nvar Library = require('../Library');\nvar $ = require('../Array');\n\nmodule.exports = function(name, vocabulary) {\n\n    var _this = this;\n\n    // See http://github.com/acuminous/yadda#203\n    this.is_language = true;\n\n    this.library = function(dictionary) {\n        return _this.localise_library(new Library(dictionary));\n    };\n\n    this.localise_library = function(library) {\n        $(vocabulary._steps).each(function(keyword) {\n            library[keyword] = function(signatures, fn, ctx, options) {\n                return $(signatures).each(function(signature) {\n                    signature = prefix_signature(_this.localise(keyword), signature);\n                    return library.define(signature, fn, ctx, options);\n                });\n            };\n        });\n        return library;\n    };\n\n    var prefix_signature = function(prefix, signature) {\n        var regex_delimiters = new RegExp('^/|/$', 'g');\n        var start_of_signature = new RegExp(/^(?:\\^)?/);\n        var one_or_more_spaces = '\\\\s+';\n        return signature.toString().replace(regex_delimiters, '').replace(start_of_signature, prefix + one_or_more_spaces);\n    };\n\n    this.localise = function(keyword) {\n        if (vocabulary[keyword] === undefined) throw new Error('Keyword \"' + keyword + '\" has not been translated into ' + name + '.');\n        return vocabulary[keyword];\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/English.js":"\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function() {\n\n    var vocabulary = {\n        feature: '[Ff]eature',\n        scenario: '(?:[Ss]cenario|[Ss]cenario [Oo]utline)',\n        examples: '(?:[Ee]xamples|[Ww]here)',\n        pending: '(?:[Pp]ending|[Tt]odo)',\n        only: '(?:[Oo]nly)',\n        background: '[Bb]ackground',\n        given: '(?:[Gg]iven|[Ww]ith|[Aa]nd|[Bb]ut|[Ee]xcept)',\n        when: '(?:[Ww]hen|[Ii]f|[Aa]nd|[Bb]ut)',\n        then: '(?:[Tt]hen|[Ee]xpect|[Aa]nd|[Bb]ut)',\n        _steps: ['given', 'when', 'then']\n    };\n\n    return new Language('English', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/French.js":"\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function() {\n\n    var vocabulary = {\n        feature: '(?:[Ff]onctionnalité)',\n        scenario: '(?:[Ss]cénario|[Pp]lan [Dd]u [Ss]cénario)',\n        examples: '(?:[Ee]xemples|[Ee]xemple|[Oo][uù])',\n        pending: '(?:[Ee]n attente|[Ee]n cours|[Tt]odo)',\n        only: '(?:[Ss]eulement])',\n        background: '(?:[Cc]ontexte)',\n        given: '(?:[Ss]oit|[ÉéEe]tant données|[ÉéEe]tant donnée|[ÉéEe]tant donnés|[ÉéEe]tant donné|[Aa]vec|[Ee]t|[Mm]ais|[Aa]ttendre)',\n        when: '(?:[Qq]uand|[Ll]orsqu\\'|[Ll]orsque|[Ss]i|[Ee]t|[Mm]ais)',\n        then: '(?:[Aa]lors|[Aa]ttendre|[Ee]t|[Mm]ais)',\n\n        _steps: [\n            'given', 'when', 'then',\n            'soit', 'etantdonnees', 'etantdonnee', 'etantdonne',\n            'quand', 'lorsque',\n            'alors'\n        ],\n        // Also aliasing French verbs for given-when-then for signature-lookup\n        get soit() { return this.given; },\n        get etantdonnees() { return this.given; },\n        get etantdonnee() { return this.given; },\n        get etantdonne() { return this.given; },\n        get quand() { return this.when; },\n        get lorsque() { return this.when; },\n        get alors() { return this.then; }\n    };\n\n    return new Language('French', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/German.js":"\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function() {\n\n    var vocabulary = {\n        feature: '(?:[Ff]unktionalität|[Ff]eature|[Aa]spekt|[Uu]secase|[Aa]nwendungsfall)',\n        scenario: '(?:[Ss]zenario|[Ss]zenario( g|G)rundriss|[Gg]eschehnis)',\n        examples: '(?:[Bb]eispiele?)',\n        pending: '(?:[Tt]odo|[Oo]ffen)',\n        only: '(?:[Nn]ur|[Ee]inzig)',\n        background: '(?:[Gg]rundlage|[Hh]intergrund|[Ss]etup|[Vv]orausgesetzt)',\n        given: '(?:[Aa]ngenommen|[Gg]egeben( sei(en)?)?|[Mm]it|[Uu]nd|[Aa]ber|[Aa]ußer)',\n        when: '(?:[Ww]enn|[Ff]alls|[Uu]nd|[Aa]ber)',\n        then: '(?:[Dd]ann|[Ff]olglich|[Aa]ußer|[Uu]nd|[Aa]ber)',\n        _steps: ['given', 'when', 'then']\n    };\n\n    return new Language('German', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/Dutch.js":"\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function() {\n\n    var vocabulary = {\n        feature: '(?:[Ff]eature|[Ff]unctionaliteit|[Ee]igenschap)',\n        scenario: '(?:[Ss]cenario|[Gg|eval)',\n        examples: '(?:[Vv]oorbeelden?)',\n        pending: '(?:[Tt]odo|[Mm]oet nog)',\n        only: '(?:[Aa]lleen)',\n        background: '(?:[Aa]chtergrond)',\n        given: '(?:[Ss]tel|[Gg]egeven(?:\\\\sdat)?|[Ee]n|[Mm]aar)',\n        when: '(?:[Aa]ls|[Ww]anneer|[Ee]n|[Mm]aar)',\n        then: '(?:[Dd]an|[Vv]ervolgens|[Ee]n|[Mm]aar)',\n        _steps: ['given', 'when', 'then']\n    };\n\n    return new Language('Dutch', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/Norwegian.js":"﻿\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function() {\n\n    var vocabulary = {\n        feature: '[Ee]genskap',\n        scenario: '[Ss]cenario',\n        examples: '[Ee]ksempler',\n        pending: '[Aa]vventer',\n        only: '[Bb]are',\n        background: '[Bb]akgrunn',\n        given: '(?:[Gg]itt|[Mm]ed|[Oo]g|[Mm]en|[Uu]nntatt)',\n        when: '(?:[Nn]år|[Oo]g|[Mm]en)',\n        then: '(?:[Ss]å|[Ff]forvent|[Oo]g|[Mm]en)',\n        _steps: ['given', 'when', 'then', 'gitt', 'når', 'så'],\n        // Also aliasing Norwegian verbs for given-when-then for signature-lookup\n        get gitt() { return this.given; },\n        get når() { return this.when; },\n        get så() { return this.then; }\n    };\n\n    return new Language('Norwegian', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/Pirate.js":"\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function() {\n\n    var vocabulary = {\n        feature: '(?:[Tt]ale|[Yy]arn)',\n        scenario: '(?:[Aa]dventure|[Ss]ortie)',\n        examples: '[Ww]herest',\n        pending: '[Bb]rig',\n        only: '[Bb]lack [Ss]pot',\n        background: '[Aa]ftground',\n        given: '(?:[Gg]iveth|[Ww]ith|[Aa]nd|[Bb]ut|[Ee]xcept)',\n        when: '(?:[Ww]hence|[Ii]f|[Aa]nd|[Bb]ut)',\n        then: '(?:[Tt]hence|[Ee]xpect|[Aa]nd|[Bb]ut)',\n        _steps: ['given', 'when', 'then', 'giveth', 'whence', 'thence'],\n        // Also aliasing Pirate verbs for given-when-then for signature-lookup\n        get giveth() { return this.given; },\n        get whence() { return this.when; },\n        get thence() { return this.then; }\n\n    };\n\n    return new Language('Pirate', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/Ukrainian.js":"/**\n * Author: Oleksii Kuznietsov\n * https://github.com/Bloodhound1982\n */\n/* jslint node: true */\n\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function() {\n\n    var vocabulary = {\n        feature: '(?:[Фф]ункція|[Фф]ункціонал|[Пп]отреба|[Аа]спект|[Оо]собливість|[Вв]ластивість)',\n        scenario: '(?:[Сс]ценарій|[Шш]аблон)',\n        examples: '[Пп]риклади',\n        pending: '(?:[Нн]еперевірений|[Чч]екаючий|[Pp]ending|[Tt]odo)',\n        only: '[Тт]ільки',\n        background: '[Кк]онтекст',\n        given: '(?:[Дд]ано|[Пп]ри|[Нн]ехай|[Іі]|[Тт]а|[Аа]ле)',\n        when: '(?:[Яя]кщо|[Дд]е|[Кк]оли|[Іі]|[Тт]а|[Аа]ле)',\n        then: '(?:[Тт]оді|[Іі]|[Тт]а|[Аа]ле)',\n        _steps: ['given', 'when', 'then']\n    };\n\n    return new Language('Ukrainian', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/Polish.js":"\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function() {\n\n    var vocabulary = {\n        feature: '(?:[Ww]łaściwość|[Ff]unkcja|[Aa]spekt|[Pp]otrzeba [Bb]iznesowa)',\n        scenario: '(?:[Ss]cenariusz|[Ss]zablon [Ss]cenariusza)',\n        examples: '[Pp]rzykłady',\n        pending: '(?:[Oo]czekujący|[Nn]iezweryfikowany|[Tt]odo)',\n        only: '[Tt]ylko',\n        background: '[Zz]ałożenia',\n        given: '(?:[Zz]akładając|[Mm]ając|[Oo]raz|[Ii]|[Aa]le)',\n        when: '(?:[Jj]eżeli|[Jj]eśli|[Gg]dy|[Kk]iedy|[Oo]raz|[Ii]|[Aa]le)',\n        then: '(?:[Ww]tedy|[Oo]raz|[Ii]|[Aa]le)',\n        _steps: [\n            'given', 'when', 'then',\n            'zakladajac', 'majac',\n            'jezeli', 'jesli', 'gdy', 'kiedy',\n            'wtedy'\n        ],\n        // Also aliasing Polish verbs for given-when-then for signature-lookup\n        get zakladajac() { return this.given; },\n        get majac() { return this.given; },\n        get jezeli() { return this.when; },\n        get jesli() { return this.when; },\n        get gdy() { return this.when; },\n        get kiedy() { return this.when; },\n        get wtedy() { return this.then; }\n    };\n\n    return new Language('Polish', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/Spanish.js":"\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function() {\n\n    var vocabulary = {\n        feature: '(?:[Ff]uncionalidad|[Cc]aracterística)',\n        scenario: '(?:[Ee]scenario|[Cc]aso)',\n        examples: '(?:[Ee]jemplos|[Ee]jemplo)',\n        pending: '[Pp]endiente',\n        only: '[S]ólo',\n        background: '[Ff]ondo',\n        given: '(?:[Ss]ea|[Ss]ean|[Dd]ado|[Dd]ada|[Dd]ados|[Dd]adas)',\n        when: '(?:[Cc]uando|[Ss]i|[Qq]ue)',\n        then: '(?:[Ee]ntonces)',\n\n        _steps: [\n            'given', 'when', 'then',\n            'sea', 'sean', 'dado', 'dada','dados', 'dadas',\n            'cuando', 'si',\n            'entonces'\n        ],\n\n        get sea() { return this.given; },\n        get sean() { return this.given; },\n        get dado() { return this.given; },\n        get dada() { return this.given; },\n        get dados() { return this.given; },\n        get dadas() { return this.given; },\n        get cuando() { return this.when; },\n        get si() { return this.when; },\n        get entonces() { return this.then; }\n    };\n\n    return new Language('Spanish', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/Russian.js":"\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function() {\n\n    var vocabulary = {\n        feature: '(?:[Фф]ункция|[Фф]ункционал|[Сс]войство)',\n        scenario: 'Сценарий',\n        examples: 'Примеры?',\n        pending: '(?:[Ww]ip|[Tt]odo)',\n        only: 'Только',\n        background: '(?:[Пп]редыстория|[Кк]онтекст)',\n        given: '(?:[Дд]опустим|[Дд]ано|[Пп]усть|[Ии]|[Н]о)(?:\\\\s[Яя])?',\n        when: '(?:[Ее]сли|[Кк]огда|[Ии]|[Н]о)(?:\\\\s[Яя])?',\n        then: '(?:[Тт]о|[Тт]огда|[Ии]|[Н]о)(?:\\\\s[Яя])?',\n        _steps: ['given', 'when', 'then']\n    };\n\n    return new Language('Russian', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/localisation/Portuguese.js":"\"use strict\";\n\nvar Language = require('./Language');\n\nmodule.exports = (function () {\n\n    var vocabulary = {\n        feature: '(?:[Ff]uncionalidade|[Cc]aracter[íi]stica)',\n        scenario: '(?:[Cc]en[aá]rio|[Cc]aso)',\n        examples: '(?:[Ee]xemplos|[Ee]xemplo)',\n        pending: '[Pp]endente',\n        only: '[S][óo]',\n        background: '[Ff]undo',\n        given: '(?:[Ss]eja|[Ss]ejam|[Dd]ado|[Dd]ada|[Dd]ados|[Dd]adas|[Ee]|[Mm]as)',\n        when: '(?:[Qq]uando|[Ss]e|[Qq]ue|[Ee]|[Mm]as)',\n        then: '(?:[Ee]nt[aã]o|[Ee]|[Mm]as)',\n\n        _steps: [\n            'given', 'when', 'then',\n            'seja', 'sejam', 'dado', 'dada', 'dados', 'dadas',\n            'quando', 'se',\n            'entao'\n        ],\n\n        get seja() { return this.given; },\n        get sejam() { return this.given; },\n        get dado() { return this.given; },\n        get dada() { return this.given; },\n        get dados() { return this.given; },\n        get dadas() { return this.given; },\n        get quando() { return this.when; },\n        get se() { return this.when; },\n        get entao() { return this.then; }\n    };\n\n    return new Language('Portuguese', vocabulary);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/converters/index.js":"\"use strict\";\n\nmodule.exports = {\n    date: require('./date-converter'),\n    integer: require('./integer-converter'),\n    float: require('./float-converter'),\n    list: require('./list-converter'),\n    table: require('./table-converter'),\n    pass_through: require('./pass-through-converter')\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/converters/date-converter.js":"\"use strict\";\n\nmodule.exports = function date_converter(value, next) {\n    var converted = Date.parse(value);\n    if (isNaN(converted)) return next(new Error('Cannot convert [' + value + '] to a date'));\n    return next(null, new Date(converted));\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/converters/integer-converter.js":"\"use strict\";\n\nmodule.exports = function integer_converter(value, next) {\n    var converted = parseInt(value);\n    if (isNaN(converted)) return next(new Error('Cannot convert [' + value + '] to an integer'));\n    return next(null, converted);\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/converters/float-converter.js":"\"use strict\";\n\nmodule.exports = function float_converter(value, next) {\n    var converted = parseFloat(value);\n    if (isNaN(converted)) return next(new Error('Cannot convert [' + value + '] to a float'));\n    return next(null, converted);\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/converters/list-converter.js":"\"use strict\";\n\nmodule.exports = function list_converter(value, next) {\n    return next(null, value.split(/\\n/));\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/converters/table-converter.js":"\"use strict\";\n\nvar $ = require('../Array');\nvar StringUtils = require('../StringUtils');\nvar COLUMN_SEPARATOR_REGEX = /[\\|\\u2506]/;\nvar OUTER_BORDERS_REGEX = /^[\\|\\u2506]|[\\|\\u2506]$/g;\nvar DASH_REGEX = /^[\\\\|\\u2506]?-{3,}/;\n\n\nmodule.exports = function table_converter(value, next) {\n\n    var rows = value.split(/\\n/);\n    var headings = parse_headings(rows.shift());\n    var handler =  is_horizinal_separator(rows[0]) ? handle_multiline_row : handle_single_line_row;\n    var table = $();\n\n    try {\n        $(rows).each(handler);\n        next(null, collapse(table));\n    } catch(err) {\n        next(err);\n    }\n\n    function handle_single_line_row(row) {\n        if (is_horizinal_separator(row)) throw new Error('Dashes are unexpected at this time');\n        start_new_row();\n        parse_fields(row);\n    }\n\n    function handle_multiline_row(row) {\n        if (is_horizinal_separator(row)) return start_new_row();\n        parse_fields(row);\n    }\n\n    function parse_headings(row) {\n        return $(row.replace(OUTER_BORDERS_REGEX, '').split(COLUMN_SEPARATOR_REGEX)).collect(function(value) {\n            return { text: StringUtils.trim(value), indentation: StringUtils.indentation(value) };\n        }).naked();\n    }\n\n    function is_horizinal_separator(row) {\n        return DASH_REGEX.test(row);\n    }\n\n    function start_new_row() {\n        table.push({});\n    }\n\n    function parse_fields(row) {\n        var fields = table.last();\n        $(row.replace(OUTER_BORDERS_REGEX, '').split(COLUMN_SEPARATOR_REGEX)).each(function(field, index) {\n            var column = headings[index].text;\n            var indentation = headings[index].indentation;\n            var text = StringUtils.rtrim(field.substr(indentation));\n            if (StringUtils.isNotBlank(field) && StringUtils.indentation(field) < indentation) throw new Error('Indentation error');\n            fields[column] = (fields[column] || []).concat(text);\n        });\n    }\n\n    function collapse(table) {\n        return table.collect(function(row) {\n            var new_row = {};\n            for (var heading in row) {\n                new_row[heading] = row[heading].join('\\n');\n            }\n            return new_row;\n        }).naked();\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/StringUtils.js":"\"use strict\";\n\nmodule.exports = {\n\n    trim: function trim(text) {\n        return text.replace(/^\\s+|\\s+$/g, '');\n    },\n    rtrim: function rtrim(text) {\n        return text.replace(/\\s+$/g, '');\n    },\n    isBlank: function isBlank(text) {\n        return /^\\s*$/g.test(text);\n    },\n    isNotBlank: function isNotBlank(text) {\n        return !this.isBlank(text);\n    },\n    indentation: function indentation(text) {\n        var match = /^(\\s*)/.exec(text);\n        return match && match[0].length || 0;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/parsers/index.js":"\"use strict\";\n\nmodule.exports = {\n    StepParser: require('./StepParser'),\n    FeatureParser: require('./FeatureParser'),\n    FeatureFileParser: require('./FeatureFileParser')\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/parsers/StepParser.js":"\"use strict\";\n\nvar $ = require('../Array');\n\nvar StepParser = function() {\n\n    var NON_BLANK_REGEX = /[^\\s]/;\n\n    this.parse = function(text, next) {\n        var steps = split(text).find_all(non_blanks);\n        return next && next(steps) || steps;\n    };\n\n    var split = function(text) {\n        return $(text.split(/\\n/));\n    };\n\n    var non_blanks = function(text) {\n        return text && NON_BLANK_REGEX.test(text);\n    };\n};\n\nmodule.exports = StepParser;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/parsers/FeatureParser.js":"\"use strict\";\n\nvar $ = require('../Array');\nvar fn = require('../fn');\nvar StringUtils = require('../StringUtils');\nvar Localisation = require('../localisation');\n\nvar FeatureParser = function(options) {\n\n    /* eslint-disable no-redeclare */\n    var defaults = { language: Localisation.default, leftPlaceholderChar: '[', rightPlaceholderChar: ']'};\n    var options = options && options.is_language ? { language: options } : options || defaults;\n    var language = options.language || defaults.language;\n    var left_placeholder_char = options.leftPlaceholderChar || defaults.leftPlaceholderChar;\n    var right_placeholder_char = options.rightPlaceholderChar || defaults.rightPlaceholderChar;\n    /* eslint-enable no-redeclare */\n\n    var FEATURE_REGEX = new RegExp('^\\\\s*' + language.localise('feature') + ':\\\\s*(.*)', 'i');\n    var SCENARIO_REGEX = new RegExp('^\\\\s*' + language.localise('scenario') + ':\\\\s*(.*)', 'i');\n    var BACKGROUND_REGEX = new RegExp('^\\\\s*' + language.localise('background') + ':\\\\s*(.*)', 'i');\n    var EXAMPLES_REGEX = new RegExp('^\\\\s*' + language.localise('examples') + ':', 'i');\n    var TEXT_REGEX = new RegExp('^(.*)$', 'i');\n    var SINGLE_LINE_COMMENT_REGEX = new RegExp('^\\\\s*#');\n    var MULTI_LINE_COMMENT_REGEX = new RegExp('^\\\\s*#{3,}');\n    var BLANK_REGEX = new RegExp('^(\\\\s*)$');\n    var DASH_REGEX = new RegExp('(^\\\\s*[\\\\|\\u2506]?-{3,})');\n    var SIMPLE_ANNOTATION_REGEX = new RegExp('^\\\\s*@([^=]*)$');\n    var NVP_ANNOTATION_REGEX = new RegExp('^\\\\s*@([^=]*)=(.*)$');\n\n    var specification;\n    var comment;\n\n    this.parse = function(text, next) {\n        reset();\n        split(text).each(parse_line);\n        return next && next(specification.export()) || specification.export();\n    };\n\n    function reset() {\n        specification = new Specification();\n        comment = false;\n    }\n\n    function split(text) {\n        return $(text.split(/\\r\\n|\\n/));\n    }\n\n    function parse_line(line, index) {\n        var match;\n        var line_number = index + 1;\n        try {\n            // eslint-disable-next-line no-return-assign\n            if (match = MULTI_LINE_COMMENT_REGEX.test(line)) return comment = !comment;\n            if (comment) return;\n            if (match = SINGLE_LINE_COMMENT_REGEX.test(line)) return;\n            if (match = SIMPLE_ANNOTATION_REGEX.exec(line)) return specification.handle('Annotation', { key: StringUtils.trim(match[1]), value: true }, line_number);\n            if (match = NVP_ANNOTATION_REGEX.exec(line)) return specification.handle('Annotation', { key: StringUtils.trim(match[1]), value: StringUtils.trim(match[2]) }, line_number);\n            if (match = FEATURE_REGEX.exec(line)) return specification.handle('Feature', match[1], line_number);\n            if (match = SCENARIO_REGEX.exec(line)) return specification.handle('Scenario', match[1], line_number);\n            if (match = BACKGROUND_REGEX.exec(line)) return specification.handle('Background', match[1], line_number);\n            if (match = EXAMPLES_REGEX.exec(line)) return specification.handle('Examples', line_number);\n            if (match = BLANK_REGEX.exec(line)) return specification.handle('Blank', match[0], line_number);\n            if (match = DASH_REGEX.exec(line)) return specification.handle('Dash', match[1], line_number);\n            if (match = TEXT_REGEX.exec(line)) return specification.handle('Text', match[1], line_number);\n        } catch (e) {\n            e.message = 'Error parsing line ' + (line_number) + ', \"' + line + '\".\\nOriginal error was: ' + e.message;\n            throw e;\n        }\n    }\n\n    var Handlers = function(handlers) {\n\n        // eslint-disable-next-line no-redeclare\n        var handlers = handlers || {};\n\n        this.register = function(event, handler) {\n            handlers[event] = handler;\n        };\n\n        this.unregister = function() {\n            $(Array.prototype.slice.call(arguments)).each(function(event) {\n                delete handlers[event];\n            });\n        };\n\n        this.find = function(event) {\n            if (!handlers[event.toLowerCase()]) throw new Error(event + ' is unexpected at this time');\n            return { handle: handlers[event.toLowerCase()] };\n        };\n    };\n\n    var Specification = function() {\n\n        var current_element = this;\n        var feature;\n        var annotations = new Annotations();\n        var handlers = new Handlers({\n            text: fn.noop,\n            blank: fn.noop,\n            annotation: stash_annotation,\n            feature: start_feature,\n            scenario: start_scenario,\n            background: start_background\n        });\n\n        function stash_annotation(event, annotation) {\n            handlers.unregister('background');\n            annotations.stash(annotation.key, annotation.value);\n        }\n\n        function start_feature(event, title) {\n            // eslint-disable-next-line no-return-assign\n            return feature = new Feature(title, annotations, new Annotations());\n        }\n\n        function start_scenario(event, title, line_number) {\n            feature = new Feature(title, new Annotations(), annotations);\n            return feature.on(event, title, line_number);\n        }\n\n        var start_background = start_scenario;\n\n        this.handle = function(event, data, line_number) {\n            current_element = current_element.on(event, data, line_number);\n        };\n\n        this.on = function(event, data, line_number) {\n            return handlers.find(event).handle(event, data, line_number) || this;\n        };\n\n        this.export = function() {\n            if (!feature) throw new Error('A feature must contain one or more scenarios');\n            return feature.export();\n        };\n    };\n\n    var Annotations = function() {\n\n        var annotations = {};\n\n        this.stash = function(key, value) {\n            if (/\\s/.test(key)) throw new Error('Invalid annotation: ' + key);\n            annotations[key.toLowerCase()] = value;\n        };\n\n        this.export = function() {\n            return annotations;\n        };\n    };\n\n    var Feature = function(title, annotations, stashed_annotations) {\n\n        var description = [];\n        var scenarios = [];\n        var background = new NullBackground();\n        var handlers = new Handlers({\n            text: capture_description,\n            blank: end_description,\n            annotation: stash_annotation,\n            scenario: start_scenario,\n            background: start_background\n        });\n        var _this = this;\n\n        function start_background(event, title) {\n            background = new Background(title, _this);\n            stashed_annotations = new Annotations();\n            return background;\n        }\n\n        function stash_annotation(event, annotation) {\n            handlers.unregister('background');\n            stashed_annotations.stash(annotation.key, annotation.value);\n        }\n\n        function capture_description(event, text) {\n            description.push(StringUtils.trim(text));\n        }\n\n        function end_description(event, text, line_number) {\n            handlers.unregister('text');\n            handlers.register('blank', fn.noop);\n        }\n\n        function start_scenario(event, title) {\n            var scenario = new Scenario(title, background, stashed_annotations, _this);\n            scenarios.push(scenario);\n            stashed_annotations = new Annotations();\n            return scenario;\n        }\n\n        function validate() {\n            if (scenarios.length === 0) throw new Error('Feature requires one or more scenarios');\n        }\n\n        this.on = function(event, data, line_number) {\n            return handlers.find(event).handle(event, data, line_number) || this;\n        };\n\n        this.export = function() {\n            validate();\n            return {\n                title: title,\n                annotations: annotations.export(),\n                description: description,\n                scenarios: $(scenarios).collect(function(scenario) {\n                    return scenario.export();\n                }).flatten().naked()\n            };\n        };\n    };\n\n    var Background = function(title, feature) {\n\n        var steps = [];\n        var blanks = [];\n        var indentation = 0;\n        var handlers = new Handlers({\n            text: capture_step,\n            blank: fn.noop,\n            annotation: stash_annotation,\n            scenario: start_scenario\n        });\n\n        function capture_step(event, text, line_number) {\n            handlers.register('dash', enable_multiline_step);\n            steps.push(StringUtils.trim(text));\n        }\n\n        function enable_multiline_step(event, text, line_number) {\n            handlers.unregister('dash', 'annotation', 'scenario');\n            handlers.register('text', start_multiline_step);\n            handlers.register('blank', stash_blanks);\n            indentation = StringUtils.indentation(text);\n        }\n\n        function start_multiline_step(event, text, line_number) {\n            handlers.register('dash', disable_multiline_step);\n            handlers.register('text', continue_multiline_step);\n            handlers.register('blank', stash_blanks);\n            handlers.register('annotation', stash_annotation);\n            handlers.register('scenario', start_scenario);\n            append_to_step(text, '\\n');\n        }\n\n        function continue_multiline_step(event, text, line_number) {\n            unstash_blanks();\n            append_to_step(text, '\\n');\n        }\n\n        function stash_blanks(event, text, line_number) {\n            blanks.push(text);\n        }\n\n        function unstash_blanks() {\n            if (!blanks.length) return;\n            append_to_step(blanks.join('\\n'), '\\n');\n            blanks = [];\n        }\n\n        function disable_multiline_step(event, text, line_number) {\n            handlers.unregister('dash');\n            handlers.register('text', capture_step);\n            handlers.register('blank', fn.noop);\n            unstash_blanks();\n        }\n\n        function append_to_step(text, prefix) {\n            if (StringUtils.isNotBlank(text) && StringUtils.indentation(text) < indentation) throw new Error('Indentation error');\n            steps[steps.length - 1] = steps[steps.length - 1] + prefix + StringUtils.rtrim(text.substr(indentation));\n        }\n\n        function stash_annotation(event, annotation, line_number) {\n            validate();\n            return feature.on(event, annotation, line_number);\n        }\n\n        function start_scenario(event, data, line_number) {\n            validate();\n            return feature.on(event, data, line_number);\n        }\n\n        function validate() {\n            if (steps.length === 0) throw new Error('Background requires one or more steps');\n        }\n\n        this.on = function(event, data, line_number) {\n            return handlers.find(event).handle(event, data, line_number) || this;\n        };\n\n        this.export = function() {\n            validate();\n            return {\n                steps: steps\n            };\n        };\n    };\n\n    var NullBackground = function() {\n        var handlers = new Handlers();\n\n        this.on = function(event, data, line_number) {\n            return handlers.find(event).handle(event, data, line_number) || this;\n        };\n\n        this.export = function() {\n            return {\n                steps: []\n            };\n        };\n    };\n\n    var Scenario = function(title, background, annotations, feature) {\n        var description = [];\n        var steps = [];\n        var blanks = [];\n        var examples;\n        var indentation = 0;\n        var handlers = new Handlers({\n            text: capture_step,\n            blank: fn.noop,\n            annotation: start_scenario,\n            scenario: start_scenario,\n            examples: start_examples\n        });\n        var _this = this;\n\n        function capture_step(event, text, line_number) {\n            handlers.register('dash', enable_multiline_step);\n            steps.push(StringUtils.trim(text));\n        }\n\n        function enable_multiline_step(event, text, line_number) {\n            handlers.unregister('dash', 'annotation', 'scenario', 'examples');\n            handlers.register('text', start_multiline_step);\n            handlers.register('blank', stash_blanks);\n            indentation = StringUtils.indentation(text);\n        }\n\n        function start_multiline_step(event, text, line_number) {\n            handlers.register('dash', disable_multiline_step);\n            handlers.register('text', continue_multiline_step);\n            handlers.register('blank', stash_blanks);\n            handlers.register('annotation', start_scenario);\n            handlers.register('scenario', start_scenario);\n            handlers.register('examples', start_examples);\n            append_to_step(text, '\\n');\n        }\n\n        function continue_multiline_step(event, text, line_number) {\n            unstash_blanks();\n            append_to_step(text, '\\n');\n        }\n\n        function stash_blanks(event, text, line_number) {\n            blanks.push(text);\n        }\n\n        function unstash_blanks() {\n            if (!blanks.length) return;\n            append_to_step(blanks.join('\\n'), '\\n');\n            blanks = [];\n        }\n\n        function disable_multiline_step(event, text, line_number) {\n            handlers.unregister('dash');\n            handlers.register('text', capture_step);\n            handlers.register('blank', fn.noop);\n            unstash_blanks();\n        }\n\n        function append_to_step(text, prefix) {\n            if (StringUtils.isNotBlank(text) && StringUtils.indentation(text) < indentation) throw new Error('Indentation error');\n            steps[steps.length - 1] = steps[steps.length - 1] + prefix + StringUtils.rtrim(text.substr(indentation));\n        }\n\n        function start_scenario(event, data, line_number) {\n            validate();\n            return feature.on(event, data, line_number);\n        }\n\n        function start_examples(event, data, line_number) {\n            validate();\n            examples = new Examples(_this);\n            return examples;\n        }\n\n        function validate() {\n            if (steps.length === 0) throw new Error('Scenario requires one or more steps');\n        }\n\n        this.on = function(event, data, line_number) {\n            return handlers.find(event).handle(event, data, line_number) || this;\n        };\n\n        this.export = function() {\n            validate();\n            var result = {\n                title: title,\n                annotations: annotations.export(),\n                description: description,\n                steps: background.export().steps.concat(steps)\n            };\n            return examples ? examples.expand(result) : result;\n        };\n    };\n\n    var Examples = function(scenario) {\n\n        var headings = [];\n        var examples = $();\n        var annotations = new Annotations();\n        var handlers = new Handlers({\n            blank: fn.noop,\n            dash: start_example_table,\n            text: capture_headings\n        });\n\n        function start_example_table(evnet, data, line_number) {\n            handlers.unregister('blank', 'dash');\n        }\n\n        function capture_headings(event, data, line_number) {\n            handlers.register('annotation', stash_annotation);\n            handlers.register('text', capture_singleline_fields);\n            handlers.register('dash', enable_multiline_examples);\n            var pos = 1;\n            headings = split(data).collect(function(column) {\n                var attributes = { text: StringUtils.trim(column), left: pos, indentation: StringUtils.indentation(column) };\n                pos += column.length + 1;\n                return attributes;\n            }).naked();\n        }\n\n        function stash_annotation(event, annotation, line_number) {\n            handlers.unregister('blank', 'dash');\n            annotations.stash(annotation.key, annotation.value);\n        }\n\n        function capture_singleline_fields(event, data, line_number) {\n            handlers.register('dash', end_example_table);\n            handlers.register('blank', end_example_table);\n            examples.push({ annotations: annotations, fields: parse_fields(data, {}) });\n            add_meta_fields(line_number);\n            annotations = new Annotations();\n        }\n\n        function enable_multiline_examples(event, data, line_number) {\n            handlers.register('text', start_capturing_multiline_fields);\n            handlers.register('dash', stop_capturing_multiline_fields);\n        }\n\n        function start_capturing_multiline_fields(event, data, line_number) {\n            handlers.register('text', continue_capturing_multiline_fields);\n            handlers.register('dash', stop_capturing_multiline_fields);\n            handlers.register('blank', end_example_table);\n            examples.push({ annotations: annotations, fields: parse_fields(data, {}) });\n            add_meta_fields(line_number);\n        }\n\n        function continue_capturing_multiline_fields(event, data, line_number) {\n            parse_fields(data, examples.last().fields);\n        }\n\n        function stop_capturing_multiline_fields(event, data, line_number) {\n            handlers.register('text', start_capturing_multiline_fields);\n            annotations = new Annotations();\n        }\n\n        function end_example_table(event, data, line_number) {\n            handlers.unregister('text', 'dash');\n            handlers.register('blank', fn.noop);\n            handlers.register('annotation', start_scenario);\n            handlers.register('scenario', start_scenario);\n        }\n\n        function add_meta_fields(line_number) {\n            var fields = examples.last().fields;\n            $(headings).each(function(heading) {\n                fields[heading.text + '.index'] = [ examples.length ];\n                fields[heading.text + '.start.line'] = [ line_number ];\n                fields[heading.text + '.start.column'] = [ heading.left + heading.indentation ];\n            });\n        }\n\n        function parse_fields(row, fields) {\n            split(row, headings.length).each(function(field, index) {\n                var column = headings[index].text;\n                var indentation = headings[index].indentation;\n                var text = StringUtils.rtrim(field.substr(indentation));\n                if (StringUtils.isNotBlank(field) && StringUtils.indentation(field) < indentation) throw new Error('Indentation error');\n                fields[column] = (fields[column] || []).concat(text);\n            });\n            return fields;\n        }\n\n        function split(row, number_of_fields) {\n            var separator = row.indexOf('\\u2506') >= 0 ? '\\u2506' : '|';\n            var fields = $(row.split(separator));\n            if (number_of_fields !== undefined && number_of_fields !== fields.length) {\n                throw new Error('Incorrect number of fields in example table. Expected ' + number_of_fields + ' but found ' + fields.length);\n            }\n            return fields;\n        }\n\n        function start_scenario(event, data, line_number) {\n            validate();\n            return scenario.on(event, data, line_number);\n        }\n\n        function validate() {\n            if (headings.length === 0) throw new Error('Examples table requires one or more headings');\n            if (examples.length === 0) throw new Error('Examples table requires one or more rows');\n        }\n\n        this.on = function(event, data, line_number) {\n            return handlers.find(event).handle(event, data, line_number) || this;\n        };\n\n        this.expand = function(scenario) {\n            validate();\n            return examples.collect(function(example) {\n                return {\n                    title: substitute(example.fields, scenario.title),\n                    annotations: shallow_merge(example.annotations.export(), scenario.annotations),\n                    description: substitute_all(example, scenario.description),\n                    steps: substitute_all(example.fields, scenario.steps)\n                };\n            }).naked();\n        };\n\n        function shallow_merge() {\n            var result = {};\n            $(Array.prototype.slice.call(arguments)).each(function(annotations) {\n                for (var key in annotations) {\n                    result[key] = annotations[key];\n                }\n            });\n            return result;\n        }\n\n        function substitute_all(example, lines) {\n            return $(lines).collect(function(line) {\n                return substitute(example, line);\n            }).naked();\n        }\n\n        function substitute(example, line) {\n            for (var heading in example) {\n                line = line.replace(new RegExp('\\\\' + left_placeholder_char + '\\\\s*' + heading + '\\\\s*\\\\' + right_placeholder_char, 'g'), StringUtils.rtrim(example[heading].join('\\n')));\n            }\n            return line;\n        }\n    };\n\n};\n\nmodule.exports = FeatureParser;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/parsers/FeatureFileParser.js":"\"use strict\";\n\nvar FeatureFileParser = function(options) {\n\n    var fs = require('../shims').fs;\n    var FeatureParser = require('./FeatureParser');\n    var parser = new FeatureParser(options);\n\n    this.parse = function(file, next) {\n        var text = fs.readFileSync(file, 'utf8');\n        var feature = parser.parse(text);\n        return next && next(feature) || feature;\n    };\n};\n\nmodule.exports = FeatureFileParser;\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/plugins/index.js":"\"use strict\";\n\nmodule.exports = {\n    casper: require('./CasperPlugin'),\n    mocha: {\n        ScenarioLevelPlugin: require('./mocha/ScenarioLevelPlugin'),\n        StepLevelPlugin: require('./mocha/StepLevelPlugin')\n    },\n    get jasmine() {\n        return this.mocha;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/plugins/CasperPlugin.js":"\"use strict\";\n\nif (!module.client) {\n    var fs = require(\"../shims\").fs;\n    global.process = global.process || {\n        cwd: function() {\n            return fs.workingDirectory;\n        }\n    };\n}\n\n\nmodule.exports = function(yadda, casper) {\n\n    var EventBus = require('yadda').EventBus;\n\n    yadda.interpreter.interpret_step = function(step, ctx, next) {\n\n        var _this = this;\n        casper.then(function() {\n            casper.test.info(step);\n            EventBus.instance().send(EventBus.ON_STEP, { step: step, ctx: ctx });\n            _this.rank_macros(step).clear_winner().interpret(step, ctx, next);\n        });\n    };\n\n    casper.yadda = function(script, ctx) {\n        if (script === undefined) return this;\n        yadda.run(script, ctx);\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/plugins/mocha/ScenarioLevelPlugin.js":"\"use strict\";\n\nvar $ = require('../../Array');\nvar Platform = require('../../Platform');\nvar BasePlugin = require('./BasePlugin');\n\nmodule.exports.init = function(options) {\n\n    // eslint-disable-next-line no-redeclare\n    var options = options || {};\n    var platform = new Platform();\n    var container = options.container || platform.get_container();\n\n    var base_plugin = BasePlugin.create(options);\n\n    function scenarios(scenarios, iterator) {\n        $(scenarios).each(function(scenario) {\n            var itFn = iterator.length === 1 ? base_plugin.it_sync : base_plugin.it_async;\n            itFn(scenario.title, scenario, function(context, scenario, done) {\n                iterator(scenario, done);\n            });\n        });\n    }\n\n    container.featureFiles = container.featureFile = base_plugin.featureFiles;\n    container.features = container.feature = base_plugin.features;\n    container.scenarios = container.scenario = scenarios;\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/plugins/mocha/BasePlugin.js":"\"use strict\";\n\nvar Localisation = require('../../localisation');\nvar Platform = require('../../Platform');\nvar FeatureFileParser = require('../../parsers/FeatureFileParser');\nvar $ = require('../../Array');\n\nmodule.exports.create = function(options) {\n\n    /* jslint shadow: true */\n    var platform = new Platform();\n    var language = options.language || Localisation.default;\n    var parser = options.parser || new FeatureFileParser(language);\n    var container = options.container || platform.get_container();\n\n    function featureFiles(files, iterator) {\n        $(files).each(function(file) {\n            features(parser.parse(file), iterator);\n        });\n    }\n\n    function features(features, iterator) {\n        $(features).each(function(feature) {\n            describe(feature.title, feature, iterator);\n        });\n    }\n\n    function describe(title, subject, iterator) {\n        var _describe = getDescribe(subject.annotations);\n        _describe(title, function() {\n            iterator(subject);\n        });\n    }\n\n    function it_async(title, subject, iterator) {\n        var _it = getIt(subject.annotations);\n        _it(title, function(done) {\n            iterator(this, subject, done);\n        });\n    }\n\n    function it_sync(title, subject, iterator) {\n        var _it = getIt(subject.annotations);\n        _it(title, function() {\n            iterator(this, subject);\n        });\n    }\n\n    function getIt(annotations, next) {\n        if (has_annotation(annotations, 'pending')) return container.xit;\n        if (has_annotation(annotations, 'only')) return container.it.only || container.fit || container.iit;\n        return container.it;\n    }\n\n    function getDescribe(annotations, next) {\n        if (has_annotation(annotations, 'pending')) return container.xdescribe;\n        if (has_annotation(annotations, 'only')) return container.describe.only || container.fdescribe || container.ddescribe;\n        return container.describe;\n    }\n\n    function has_annotation(annotations, name) {\n        var regexp = new RegExp('^' + language.localise(name) + '$', 'i');\n        for (var key in annotations) {\n            if (regexp.test(key)) return true;\n        }\n    }\n\n    return {\n        featureFiles: featureFiles,\n        features: features,\n        describe: describe,\n        it_async: it_async,\n        it_sync: it_sync\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/plugins/mocha/StepLevelPlugin.js":"\"use strict\";\n\nvar $ = require('../../Array');\nvar Platform = require('../../Platform');\nvar BasePlugin = require('./BasePlugin');\n\nmodule.exports.init = function(options) {\n\n    // eslint-disable-next-line no-redeclare\n    var options = options || {};\n    var platform = new Platform();\n    var container = options.container || platform.get_container();\n\n    var base_plugin = BasePlugin.create(options);\n\n    function scenarios(scenarios, iterator) {\n        $(scenarios).each(function(scenario) {\n            base_plugin.describe(scenario.title, scenario, iterator);\n        });\n    }\n\n    function steps(steps, iterator) {\n\n        var abort = false;\n\n        $(steps).each(function(step) {\n            var stepFn = iterator.length === 1 ? step_sync : step_async;\n            stepFn(step, iterator);\n        });\n\n        function step_async(step, iterator) {\n            base_plugin.it_async(step, step, function(context, step, done) {\n                if (abort) {\n                    return context.skip ? context.skip() : done();\n                }\n                abort = true;\n                iterator(step, function(err) {\n                    if (err) return (done.fail || done)(err);\n                    abort = false;\n                    done();\n                });\n            });\n        }\n\n        function step_sync(step, iterator) {\n            base_plugin.it_sync(step, step, function(context, step) {\n                if (abort) return context.skip && context.skip();\n                abort = true;\n                iterator(step);\n                abort = false;\n            });\n        }\n    }\n\n    container.featureFiles = container.featureFile = base_plugin.featureFiles;\n    container.features = container.feature = base_plugin.features;\n    container.scenarios = container.scenario = scenarios;\n    container.steps = steps;\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/karma.conf.js":"\n/* jslint node: false */\n\nmodule.exports = function(config) {\n    \"use strict\";\n    config.set({\n        plugins: [\n            \"karma-browserify\",\n            \"karma-phantomjs-launcher\",\n            \"karma-mocha\"\n        ],\n        frameworks: [\"browserify\", \"mocha\"],\n        files: [\n            \"lib/**/*.js\",\n            {pattern: \"lib/**/!(*.js)\", included: false},\n            \"test/**/*.js\",\n            {pattern: \"test/**/!(*.js)\", included: false}\n        ],\n        preprocessors: {\n            \"lib/**/*.js\": [\"browserify\"],\n            \"test/**/*.js\": [\"browserify\"]\n        },\n        client: {\n            mocha: {\n                reporter: \"html\",\n                ui: \"bdd\"\n            }\n        },\n        browserify: {\n            debug: true,\n            configure: function (bundle) {\n                bundle.on('prebundle', function () {\n                    bundle.require(\"./lib/index\", {expose: \"yadda\"});\n                });\n            }\n        },\n        browsers: [\"PhantomJS\"],\n        reporters: [\"progress\"],\n        port: 9876,\n        colors: true,\n        logLevel: config.LOG_INFO,\n        autoWatch: false,\n        captureTimeout: 6000,\n        singleRun: true\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/bin/browserify.js":"\"use strict\";\n\nvar browserify = require('browserify');\nvar path = require('path');\nvar fs = require('fs');\nvar rootpath = process.cwd();\nvar pkg = require(path.join(rootpath, 'package.json'));\n\n(function web_bundle() {\n    var bundle = fs.createWriteStream(path.join(rootpath, 'dist', 'yadda-' + pkg.version + '.js'));\n\n    var b = browserify();\n    b.add('./lib/index.js');\n    b.require('./lib/index.js', { expose: 'yadda' });\n    b.ignore('casper');\n    b.bundle().pipe(bundle);\n})();\n\n(function umd_bundle() {\n    var bundle = fs.createWriteStream(path.join(rootpath, 'dist', 'yadda-umd-' + pkg.version + '.js'));\n\n    var b = browserify();\n    b.add('./lib/index.js');\n\n    b.require('./lib/index.js', { expose: 'yadda' });\n    b.ignore('casper');\n\n    b.bundle().pipe(bundle);\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/shims/karma-fs.js":"\nmodule.exports = (function() {\n    \"use strict\";\n\n    var path = require(\"./karma-path\");\n\n    function absolutePath(relativePath) {\n        return path.resolve(path.normalize(relativePath.split(\"\\\\\").join(\"/\")));\n    }\n\n    var KarmaFileSystem = function() {\n        this.registry = new KarmaPathRegistry();\n        this.converter = new KarmaUriPathConverter(\"/base/\", \"/\");\n        this.reader = new KarmaFileReader(this.converter);\n\n        var servedUris = Object.keys(window.__karma__.files);\n        var servedFiles = this.converter.parseUris(servedUris);\n        servedFiles.forEach(this.registry.addFile, this.registry);\n    };\n    KarmaFileSystem.prototype = {\n        constructor: KarmaFileSystem,\n        workingDirectory: \"/\",\n        existsSync: function(path) {\n            return this.registry.exists(path);\n        },\n        readdirSync: function(path) {\n            return this.registry.getContent(path);\n        },\n        statSync: function(path) {\n            return {\n                isDirectory: function() {\n                    return this.registry.isDirectory(path);\n                }.bind(this)\n            };\n        },\n        readFileSync: function(file, encoding) {\n            if (encoding !== \"utf8\") throw new Error(\"This fs.readFileSync() shim does not support other than utf8 encoding.\");\n            if (!this.registry.isFile(file)) throw new Error(\"File does not exist: \" + file);\n            return this.reader.readFile(file);\n        }\n    };\n\n    var KarmaPathRegistry = function KarmaPathRegistry() {\n        this.paths = {};\n    };\n\n    KarmaPathRegistry.prototype = {\n        constructor: KarmaPathRegistry,\n        addFile: function(file) {\n            file = absolutePath(file);\n            this.paths[file] = KarmaPathRegistry.TYPE_FILE;\n            var parentDirectory = path.dirname(file);\n            this.addDirectory(parentDirectory);\n        },\n        addDirectory: function(directory) {\n            directory = absolutePath(directory);\n            this.paths[directory] = KarmaPathRegistry.TYPE_DIRECTORY;\n            var parentDirectory = path.dirname(directory);\n            if (parentDirectory !== directory) this.addDirectory(parentDirectory);\n        },\n        isFile: function(file) {\n            file = absolutePath(file);\n            return this.exists(file) && this.paths[file] === KarmaPathRegistry.TYPE_FILE;\n        },\n        isDirectory: function(directory) {\n            directory = absolutePath(directory);\n            return this.exists(directory) && this.paths[directory] === KarmaPathRegistry.TYPE_DIRECTORY;\n        },\n        exists: function(node) {\n            node = absolutePath(node);\n            return this.paths.hasOwnProperty(node);\n        },\n        getContent: function(directory) {\n            if (!this.isDirectory(directory)) throw new Error(\"Not a directory: \" + directory);\n            directory = absolutePath(directory);\n            return Object.keys(this.paths).filter(function(node) {\n                if (node === directory) return false;\n                var parentDirectory = path.dirname(node);\n                return parentDirectory === directory;\n            }, this).map(function(node) {\n                return path.basename(node);\n            });\n        }\n    };\n\n    KarmaPathRegistry.TYPE_FILE = 0;\n    KarmaPathRegistry.TYPE_DIRECTORY = 1;\n\n    var KarmaUriPathConverter = function KarmaUriPathConverter(baseUri, workingDirectory) {\n        this.workingDirectory = workingDirectory;\n        this.workingDirectoryPattern = this.patternFromBase(workingDirectory);\n        this.baseUri = baseUri;\n        this.baseUriPattern = this.patternFromBase(baseUri);\n    };\n\n    KarmaUriPathConverter.prototype = {\n        constructor: KarmaUriPathConverter,\n        patternFromBase: function(string, flags) {\n            var pattern = \"^\" + string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n            return new RegExp(pattern, flags);\n        },\n        parseUris: function(uris) {\n            return uris.filter(function(uri) {\n                return this.baseUriPattern.test(uri);\n            }, this).map(function(uri) {\n                return uri.replace(this.baseUriPattern, this.workingDirectory);\n            }, this);\n        },\n        buildUri: function(file) {\n            file = absolutePath(file);\n            if (!this.workingDirectoryPattern.test(file)) throw new Error(\"Path is not in working directory: \" + file);\n            return file.replace(this.workingDirectoryPattern, this.baseUri);\n        }\n    };\n\n    var KarmaFileReader = function KarmaFileReader(converter) {\n        this.converter = converter;\n    };\n\n    KarmaFileReader.prototype = {\n        constructor: KarmaFileReader,\n        readFile: function(file) {\n            var uri = this.converter.buildUri(file);\n            // eslint-disable-next-line no-undef\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"get\", uri, false);\n            xhr.send();\n            return xhr.responseText;\n        }\n    };\n\n    return new KarmaFileSystem();\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/shims/karma-path.js":"\nmodule.exports = (function () {\n\n    \"use strict\";\n\n    var path = {};\n\n    try {\n        path = require('path');\n    } catch (e) {\n        throw new Error(\"The environment does not support the path module, it's probably not using browserify.\");\n    }\n\n    if (typeof path.normalize !== \"function\" || typeof path.dirname !== \"function\")\n        throw new Error(\"The path module emulation does not contain implementations of required functions.\");\n\n    return path;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/shims/karma-process.js":"\nmodule.exports = (function() {\n\n    \"use strict\";\n\n    var fs = require(\"./karma-fs\");\n    var process = {};\n\n    process.cwd = function() {\n        return fs.workingDirectory;\n    };\n\n    return process;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/shims/phantom-fs.js":"\"use strict\";\n\nmodule.exports = (function() {\n    if (module.client) return {}; // Running in browser, not via node\n\n    var fs = require('fs');\n\n    fs.existsSync = fs.existsSync || fs.exists;\n\n    fs.readdirSync = fs.readdirSync || function(path) {\n        return fs.list(path).filter(function(name) {\n            return name !== '.' && name !== '..';\n        });\n    };\n\n    fs.statSync = fs.statSync || function(path) {\n        return {\n            isDirectory: function() {\n                return fs.isDirectory(path);\n            }\n        };\n    };\n\n    return fs;\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/shims/phantom-path.js":"\n\"use strict\";\n\nmodule.exports = (function() {\n    if (module.client) return {}; // Running in browser, not via node\n\n    var fs = require('fs');\n    var path = {};\n\n    try {\n        path = require('path');\n    } catch (e) {\n        // meh\n    }\n\n    path.join = path.join || function() {\n        return Array.prototype.join.call(arguments, fs.separator);\n    };\n\n    path.relative = path.relative || function(from, to) {\n        return from + fs.separator + to;\n    };\n\n    return path;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-yadda/node_modules/yadda/lib/shims/phantom-process.js":"\"use strict\";\n\nmodule.exports = (function() {\n    if (module.client) return {}; // Running in browser, not via node\n\n    var fs = require('fs');\n    var process = typeof process !== 'undefined' ? process : {};\n\n    process.cwd = function() {\n        return fs.workingDirectory;\n    };\n\n    return process;\n\n})();\n"}